import type { NextPage } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import { useEffect, useState } from 'react';
import {
  Heading,
  Box,
  Flex,
  Input,
  Stack,
  IconButton,
  useToast,
} from '@chakra-ui/react';
import { useQuery } from '@apollo/client';
import { getApolloClient } from '../apollo';
import GET_CHARACTERS from '../apollo/queries/charactersQueries';
import styles from '../styles/Home.module.css';
import Characters from '../Components/Characters';
import Character from '../apollo/dataSchemas';

export interface Results {
  characters: Character[];
}

const Home: NextPage<Results> = (results) => {
  const initialState: Results = results;
  const [characters, setCharacters] = useState(initialState.characters);
  const { loading, error, data } = useQuery(GET_CHARACTERS)

  useEffect(() => {
    console.log("ðŸš€ ~ file: index.tsx ~ line 28 ~ data", data)
  }, [data])

  return (
    <Flex directiion="column" justify="center" align="center">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Box
        mb={4}
        flex-direction="column"
        align="center"
        justify="center"
        py={8}
      >
        <Heading as="h1" size="2xl" mb={8}>
          Rick & Morty Graphql Searcher
        </Heading>
        <Characters characters={characters} />
      </Box>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </Flex>
  );
};

export const getStaticProps = async () => {
  const apolloClient = getApolloClient();

  const { data } = await apolloClient.query({
    query: GET_CHARACTERS,
  });


  return {
    props: {
      characters: data.characters.results,
    },
  };
};

export default Home;
